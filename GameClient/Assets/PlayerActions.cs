//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""RacePlayerActionMap"",
            ""id"": ""d2508a0b-2691-48ef-9403-84dc9320ff61"",
            ""actions"": [
                {
                    ""name"": ""vertical"",
                    ""type"": ""Value"",
                    ""id"": ""9b574f6c-3475-4b84-8a28-228938625c04"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""4c51fb81-cbbf-4416-922d-e7d0cfc67ed8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""brake"",
                    ""type"": ""Value"",
                    ""id"": ""5785f175-5f0e-48b2-ac85-3d8d1a664777"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Letters"",
                    ""id"": ""671e95d2-a21c-4932-b630-2504d415ec1d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6b4125bd-d79e-40e9-a5f8-3a1942d12799"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3395236a-b95d-415d-9061-88ae7a6d6d45"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""53172436-9d83-491f-b344-fcead790f153"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""96db7265-dcf9-4f1a-b2ab-fce8e25d8a51"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c46f90ec-177f-46ed-bc6e-04074d125799"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""53d0d419-9e72-4faa-945b-94f951715563"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Letters"",
                    ""id"": ""15edfeaa-9f01-4b40-a1cf-ba95d819a6cc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""77c7c8d5-23fc-499c-8c7a-f58e6d37626e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cb8ac516-62f7-4322-b5ad-e93a59ec8b42"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""9d3d7993-db9c-4e4c-8932-855a2e782de5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""86def7a0-c809-4d7b-a7c5-63272a3d6f3d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""416d1a85-70c7-4274-b0ad-58445104215f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RacePlayerActionMap
        m_RacePlayerActionMap = asset.FindActionMap("RacePlayerActionMap", throwIfNotFound: true);
        m_RacePlayerActionMap_vertical = m_RacePlayerActionMap.FindAction("vertical", throwIfNotFound: true);
        m_RacePlayerActionMap_horizontal = m_RacePlayerActionMap.FindAction("horizontal", throwIfNotFound: true);
        m_RacePlayerActionMap_brake = m_RacePlayerActionMap.FindAction("brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RacePlayerActionMap
    private readonly InputActionMap m_RacePlayerActionMap;
    private List<IRacePlayerActionMapActions> m_RacePlayerActionMapActionsCallbackInterfaces = new List<IRacePlayerActionMapActions>();
    private readonly InputAction m_RacePlayerActionMap_vertical;
    private readonly InputAction m_RacePlayerActionMap_horizontal;
    private readonly InputAction m_RacePlayerActionMap_brake;
    public struct RacePlayerActionMapActions
    {
        private @PlayerActions m_Wrapper;
        public RacePlayerActionMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @vertical => m_Wrapper.m_RacePlayerActionMap_vertical;
        public InputAction @horizontal => m_Wrapper.m_RacePlayerActionMap_horizontal;
        public InputAction @brake => m_Wrapper.m_RacePlayerActionMap_brake;
        public InputActionMap Get() { return m_Wrapper.m_RacePlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RacePlayerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IRacePlayerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_RacePlayerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RacePlayerActionMapActionsCallbackInterfaces.Add(instance);
            @vertical.started += instance.OnVertical;
            @vertical.performed += instance.OnVertical;
            @vertical.canceled += instance.OnVertical;
            @horizontal.started += instance.OnHorizontal;
            @horizontal.performed += instance.OnHorizontal;
            @horizontal.canceled += instance.OnHorizontal;
            @brake.started += instance.OnBrake;
            @brake.performed += instance.OnBrake;
            @brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(IRacePlayerActionMapActions instance)
        {
            @vertical.started -= instance.OnVertical;
            @vertical.performed -= instance.OnVertical;
            @vertical.canceled -= instance.OnVertical;
            @horizontal.started -= instance.OnHorizontal;
            @horizontal.performed -= instance.OnHorizontal;
            @horizontal.canceled -= instance.OnHorizontal;
            @brake.started -= instance.OnBrake;
            @brake.performed -= instance.OnBrake;
            @brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(IRacePlayerActionMapActions instance)
        {
            if (m_Wrapper.m_RacePlayerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRacePlayerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_RacePlayerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RacePlayerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RacePlayerActionMapActions @RacePlayerActionMap => new RacePlayerActionMapActions(this);
    public interface IRacePlayerActionMapActions
    {
        void OnVertical(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
}
